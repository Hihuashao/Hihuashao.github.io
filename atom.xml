<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hihuashao.github.io</id>
    <title>辞南的博客</title>
    <updated>2020-10-26T14:01:26.022Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hihuashao.github.io"/>
    <link rel="self" href="https://hihuashao.github.io/atom.xml"/>
    <subtitle>一个人的夜晚</subtitle>
    <logo>https://hihuashao.github.io/images/avatar.png</logo>
    <icon>https://hihuashao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 辞南的博客</rights>
    <entry>
        <title type="html"><![CDATA[沟通提问]]></title>
        <id>https://hihuashao.github.io/post/gou-tong-ti-wen/</id>
        <link href="https://hihuashao.github.io/post/gou-tong-ti-wen/">
        </link>
        <updated>2020-10-26T13:53:07.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>1：您都有在做哪些推广方式呢？（可以单独问 咱是靠直通车推广嘛？或者咱有刷单嘛？  咱店铺有首页流量嘛？再针对性回答）<br>
客户： 淘客 直通车的。<br>
答：嗯嗯  掌柜，其实像淘客  开车 这都是传统的运营思路了，没办法达到店铺快速提升的效果 前期付费推广开着的时候 是有些流量的  但是咱一但关了  流量就会下滑。<br>
像我们操作店铺主要做的是首页免费流量这块，我们也掌握淘宝最前沿的推广方式  内容营销 粉丝营销  粉丝老客户维护 上首页多展位 猜你喜欢 云码推广 等 帮助店铺快速引流提升。<br>
不会让店主依靠砸钱做付费推广来提升店铺的。</p>
<p>（2）没有用 只是搜索<br>
咱只是靠着搜索来做店铺的话是有一定的局限性，本身咱店铺基础低，在自然搜索这块肯定是竞争不过那些天猫大店铺的，咱想提升店铺的话还是需要拓展推广渠道啊</p>
<p>2：您现在是在担心我们不能给您做出效果吗？<br>
客户：对 就是怕花了钱没有效果 退款麻烦<br>
咱们合作是不会没有效果的，我也给您发过很多我们操作提升的店铺数据，在不做任何的付费推广情况下都可以做到每日几万营业额。<br>
而且我们敢给您保障，无效果或者不满意 您可以在线上退订退款，我们就肯定有能力给您做到店铺提升，要不然咱们合作也没有意义了<br>
这个钱是压付在淘宝的，不是打我们对公账户的，退款是淘宝直接退给您的，不会拖泥带水的，但是咱们合作肯定是要奔着店铺提升去的，咱不能还没合作就想着退款呀，退款是对您最基本的保障，我们肯定不会让您走到退款哪一步的。</p>
<p>3.咱在上秋款前 不做好粉丝积累  粉丝维护 ， 难道要等到上新后通过刷单来做基础销量吗？/没粉丝 没老客户 您上新品 还靠刷单嘛？<br>
客户：你们不刷单嘛？<br>
我们都是通过做积累粉丝 做粉丝营销 上新的时候，给粉丝 老客户通过微淘做活动，来做基础销量，再配合首页流量 把产品做起来的<br>
而且，刷单都是传统的运营思路 ，1：淘宝对小店铺刷单排查严格 ，如果被查到产品刷单 这款不就死了嘛 2：刷单打乱店铺标签，咋做首页流量呢</p>
<p>4：您现在是个人在打理店铺吗？<br>
客户：嗯嗯，是的<br>
现在淘宝都是讲究精细化运营，单靠您个人肯定是没有足够的时间与精力把店铺做到面面俱到吧？ 掌柜<br>
其实我们也看了咱店铺 咱现在粉丝积累的不多，而且没有通过旺旺群 微淘注重维护，加上销量不高，缺乏推广渠道的拓展。<br>
如果咱能把店铺欠缺的方面做好，再拓展推广渠道，咱店铺翻倍提升起来，您感觉难嘛?</p>
<p>5：掌柜，最近几天没有回我是还在纠结嘛？<br>
客户：是的，想要考虑考虑<br>
考虑哪些方面呢？<br>
（问完客户不回）<br>
其实我们价格也不高，也给您有保障 也能退款  也给看我们操作店铺的提升情况 以及我们运营团队日常的加班情况 ，还有啥担心的呢？<br>
其实咱们合作也没啥可考虑的，有保障 运营有能力 对负责 就可以合作呀<br>
而且咱做店铺肯定是需要趁早做的，本身咱店铺基础低，需要尽快的完善基础 到积累粉丝 与 粉丝维护 这样咱接下来在秋款上新的时候 才能快速 的 做出基础销量 以及新品的权重啊<br>
您这样拖下去 拖到是店铺效果 的好与坏啊<br>
新品上新后 没有粉丝老客户做基础销量 ，咱再通过刷单去做嘛？<br>
我催您合作也是一直站在 对您店铺有利，能给店铺做出最大的效果上 给您谈合作</p>
<p>6:咱准备什么时候上新秋款呀？<br>
客户：下个月吧 （近期上）<br>
那咱秋款就是找好了，在拍照？<br>
客户：是的<br>
那咱针对秋款的上新，有哪些准备？ 上新后基础销量准备怎么做呢？<br>
客户：刷单<br>
再给他说 提前做粉丝积累 与维护等方面</p>
<p>7：咱店铺货源稳定吗？可以支撑打造出爆款嘛？<br>
客户：稳定<br>
稳定的话那就行的， 这样就不会出现打造出爆款后断货的情况，咱这个类目就适合的就是走 打造几款的爆款，然后做关联销售 带动整店盈利的路线</p>
<p>8：我看咱店铺没有做直播是您没有时间播吗？<br>
客户：也不是没有时间，只是没有直播过，不知道怎么播，也想尝试直播卖货<br>
嗯嗯，直播这块是今年淘宝重点发展的方向，针对直播也是推出了很多的官方扶持，咱这个类目也是适合直播卖货，这样也能让顾客更加详细的了解到产品<br>
咱合作后我们可以指导您直播的，帮您做直播计划与预告，还可以通过做粉丝 老客户以及推广直播间，来给您提高直播效果</p>
<p>9：掌柜，我看咱店铺有直播 ，而且观看人数还不少，咱直播效果不错吧？<br>
客户：嗯嗯，我店铺主要是以直播卖货的，客户都是通过直播购买的<br>
直播的话只是单一的方面，咱店铺想要做大，肯定也不能单靠直播，这样是有局限性的<br>
咱还需要把店铺精细化运营起来，比如：做推广渠道的拓展，让咱产品上首页多个展位 加上 提升店铺的权重，增加产品搜索排名。来给店铺带来更多的展现，以及流量。在这过程中还要注重新粉丝的积累 与 维护，还可以再提高您的直播效果呢</p>
<p>10：掌柜，您一直不相信是之前合作过运营商，没有效果嘛？<br>
客户：是的 之前合作过几家，效果不好<br>
您合作的是哪家呀？<br>
客户：xx运营商<br>
您感觉他们是不负责吗？ 不认真给您操作店铺吗？ 还是能力有问题呢？没有帮助店铺提升<br>
客户：各方面都有吧<br>
嗯嗯，您之前合作过运营，没有做出效果，现在比较担心我也是可以理解的。但是运营与运营之间的能力是不同的，操作店铺的思路也是不一样的，负责程度也不同，所以带来的效果也不一样<br>
然后强调公司实力，运营的能力以及负责程度（通过公司规模 top前2 操作店铺数据情况 运营9大亮点 服务9大亮点  运营加班等多方面凸显我们 ）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[沟通提问回答]]></title>
        <id>https://hihuashao.github.io/post/gou-tong-ti-wen-hui-da/</id>
        <link href="https://hihuashao.github.io/post/gou-tong-ti-wen-hui-da/">
        </link>
        <updated>2020-10-26T13:50:29.000Z</updated>
        <content type="html"><![CDATA[<p>1.咱店铺现在在用什么推广方式呀<br>
客户一般回答直通车或者淘宝客</p>
<p>答:现在 淘宝讲究精细化运营 但靠直通车 淘宝客 刷单有一定的局限性 很难把店铺做起来，咱想要提升店铺的话就得掌握多渠道引流了<br>
咱们想要把店铺做大的话，就需要咱们拓展多各渠道配合到店铺去引流了，把咱们店铺产品推上首页展位，获取首页猜你喜欢 每日好店 有好货等展位的流量去帮助店铺提升，以及内容营销  微淘  直播 杨淘买家秀等方式</p>
<p>2.现在淘宝最大的引流渠道就是首页流量了 已经超过自然搜索了 咱店铺现在有首页流量吗<br>
客户说没有<br>
可能是人群不精准或者是老客户回购率差 可以利用最新的超级推荐定位人群直接退上手淘首页展位，在通过调整关键词，根据店铺数据分析找最精准人群推广<br>
现在淘宝最流行的内容化营销（微淘+直播+短视频+粉丝运营+老客户复购率+手淘搜索+猜你喜欢+有好货+买家秀+洋淘秀）上手淘首页，做这些自然免费流量，这种健康流量比较有利于咱们店铺的发展</p>
<p>3.掌柜咱店铺微淘有重点去做嘛<br>
微淘可以维护老客户 增加 粉丝粘性 促进复购  可以引公域流量  帮助店铺选款 测款  咱店铺可以往这方面去进行拓展 可以给咱们店铺带来大量的免费流量，对店铺的提升也是有很大帮助的</p>
<p>4.咱店铺怎么没有去做直播呀 是没有时间吗<br>
我们可以协助您做直播计划 直播预告 我们有专属的达人资源 可以联系达人来帮咱做直播 如果咱有时间也可以自己直播的 像现在淘宝重点扶持的内容营销  粉丝营销  这些咱都可以去做的   直播  微淘  短视频  这些都是可以上公域的  引进大量公域流量的  而且都是免费流量  健康流量  咱店铺可以往这方面去进行拓展<br>
5.咱店铺收藏加购这块做的怎么样呢<br>
咱可以通过活动前的多渠道引流 活动前 尽可能的多拉些 新访客 然后店铺做活动氛围 以及粉丝活动 微淘 直播 短视频 内容营销来吸引 新访客来关注店铺（配合咱们操作店铺收藏加购的数据）<br>
6.客户问完价格不回了 问客户怎么了 咱是觉得价格高吗<br>
掌柜 价格这块给您说都是没有水分的 我们的服务费平均下来一个月才4000多 现在找一个客服都要这么贵了 而且我们给您匹配的是不低于四人的运营团队来操作咱店铺要是您再找价格便宜的除非您能接受一个人接七八家店铺 店铺提升后我们的服务费一天就赚回来了啊</p>
<p>7.哥 咱店铺现在是您自己在操作吗<br>
咱自己操作的效果怎么样啊 咱现在有没有想法找我们专业的运营团队帮您操作店铺啊 因为咱店铺本身就有一定的基础 接手过来之后配合我们专业的运营团队再配合上下半年的市场 提升起来肯定是很快的<br>
8.客户一直担心效果不回复  哥 怎么了 咱还是担心效果这方面吗</p>
<p>您空担心这样僵持  店铺也没办法交过来啊<br>
我们现在从资质上  全运营公司我们排第二 是属于 专业中的顶尖<br>
而且我家做    有专门的经验丰富的团队  况且一个团队只接手三家店铺  晚上经常加班 保质保量做每个店铺<br>
您还觉得我们 哪地方 能做不好 从而 给您达不到效果呢 ？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[沟通中需要的问题]]></title>
        <id>https://hihuashao.github.io/post/gou-tong-zhong-xu-yao-de-wen-ti/</id>
        <link href="https://hihuashao.github.io/post/gou-tong-zhong-xu-yao-de-wen-ti/">
        </link>
        <updated>2020-10-26T13:45:32.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>1.掌柜，咱们现在有在做店铺清仓嘛？有  嗯嗯 效果这块怎么样呢？<br>
好，那有没有配合着店铺内功 积累粉丝这块去做呢？</p>
<p>不好 ，现在其实有很多渠道都可以去做，像老客户营销 降低价格 优惠券，直播或者达人直播，等都可以去清仓的，然后再借此累积一波粉丝老客户 等秋款以上就可以里面爆发<br>
掌柜，咱店铺货源这块怎么样？后期推广起来能跟的上嘛<br>
嗯嗯 那咱货源这块没问题的话 下半年这么好的市场配合上专业运营的最新渠道效果这块肯定是没问题的</p>
<p>2.掌柜 我们店铺买家秀有做吗？效果怎么样呢？ 有 效果不好<br>
嗯嗯 我们可以征集买家秀通过激励的方式提高买家拍摄买家秀，还可以通过活动征集的形式，来提高用户晒买家秀的积极性。店铺有一定数量的买家秀之后，每周至少3天，去后台筛选优质的买家秀内容，进行加精。加精的买家秀，系统会自动抓取优质内容，这对于我们店铺展示和曝光，以及后期的转化是有帮助的。</p>
<p>3.我们店铺新品有做刷单吗？有<br>
一般针对新品上架后，如何快速破零是每个掌柜比较关心的问题。因为这对提升店铺动销率非常重要。但是刷单的风险比较大不建议用刷单的方式<br>
可以利用新品定向优惠提升老客复购，针对老用户专享折扣，保证价格全网最低<br>
还可以用活动推广，主要强调上新，比如前2000件的优惠，冲着秒杀进去的老客进去就会发现价格更优惠，因为日常老客都会关注店铺，在微淘主要宣传下买过和没买过的价格区别等两种方式来提高新品销量</p>
<p>4.现在咱们做的推广渠都有哪些呢？<br>
现在淘宝讲究的是多渠道引流   咱如果只做一个渠道的推广是远远不够的 产品得不到大的曝光  进来的流量还是有限的<br>
（流量来源图）这是我们操作店铺的引流渠道  是多渠道的去进行推广引流  而且现在是千人前面的淘宝讲究的是精细化的运营  店铺需要全方面的发展</p>
<p>5.掌柜  知道这个有好货推荐大赏不<br>
就这一个展位就能给咱带来上千的访客  况且这么多展位  咱如果多拓展几个渠道  咱就可以快速的把店铺提升上去了<br>
这个有两个关键1.已推荐数2.88会员vip占比</p>
<p>6.我看咱是~~类目 可以申请报名（亲宝贝、ifashion、极有家、全球购、中国质造）您看您能报名不  然后发申请链接</p>
<p>7.掌柜  咱店铺现在有做直播这块吗<br>
说下做直播的好处 如果您有时间的话 我们可以辅助您进行直播 做直播前的策划 直播内容 粉丝互动 等等  从而提高咱店铺的直播效果和质量  促进客户下单<br>
如果您没时间的话 我们也可以找达人给咱直播</p>
<p>8.掌柜  咱店铺现在都是您您一个人在打理吗<br>
恩恩  咱一个人的话  无论是从时间 精力 还是专业度来说 都是不可能做到面面俱到的  还是得有专业团队帮咱打理<br>
发图 您看现在天猫65%以上的店铺 都是交给专业团队打理的</p>
<p>9哥 咱店铺现在有没有想超越的同行竞店呢？<br>
有  然后问店铺名字 分析对比 哪方面对比别人没做</p>
<p>10.掌柜 我看咱店铺 微淘这块阅读量很少，但是咱粉丝这块也不少，是不是咱店铺现在死粉较多啊 ？<br>
结合粉丝积累进行带动合作</p>
<p>11.看客户朋友圈 问问题，可以有生活的关心 比如（姐姐 看您最近挺忙的 是忙孩子上学的事情吗）</p>
<p>12.哥  如果后期给咱推广起来的话 ，货源这块稳定吗？</p>
<ol>
<li>到了XX活动 问客户活动报名了吗 ？没报发链接  报了</li>
</ol>
<p>14.您说之前合作过好几家运营 ，都是哪几家啊 我对运营行业非常了解 给您分析下为什么做不起来</p>
<p>15.和您沟通也挺久了  看咱对店铺提升这块没有特别在意 ，您线下是有别的实体生意吗？ （是不是侧重点不再淘宝这块啊？）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[今天你美甲了吗?]]></title>
        <id>https://hihuashao.github.io/post/nan-wang-de-ye/</id>
        <link href="https://hihuashao.github.io/post/nan-wang-de-ye/">
        </link>
        <updated>2020-06-12T15:17:33.000Z</updated>
        <content type="html"><![CDATA[<p>想看更精美的图片点击即可哦<br>
<img src="https://hihuashao.github.io/post-images/1591975866447.jpg" alt="" loading="lazy"><br>
我们的服务“指”为你!!<br>
<img src="https://hihuashao.github.io/post-images/1591975638134.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[猫人美甲]]></title>
        <id>https://hihuashao.github.io/post/mao-ren-mei-jia/</id>
        <link href="https://hihuashao.github.io/post/mao-ren-mei-jia/">
        </link>
        <updated>2020-06-12T11:56:25.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://hihuashao.github.io/post-images/1591963596401.jpg" alt="" loading="lazy"><br>
<img src="https://hihuashao.github.io/post-images/1591963758895.jpg" alt="" loading="lazy"><br>
<img src="https://hihuashao.github.io/post-images/1591964014056.jpg" alt="" loading="lazy"><br>
<img src="https://hihuashao.github.io/post-images/1591964022151.jpg" alt="" loading="lazy"><br>
<img src="https://hihuashao.github.io/post-images/1591964029529.jpg" alt="" loading="lazy"><br>
<img src="https://hihuashao.github.io/post-images/1591964046317.jpg" alt="" loading="lazy"><br>
美丽才是你的资本，沂水猫人美甲欢迎您</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[7.常规技术面试题（Java）]]></title>
        <id>https://hihuashao.github.io/post/7chang-gui-ji-zhu-mian-shi-ti-java/</id>
        <link href="https://hihuashao.github.io/post/7chang-gui-ji-zhu-mian-shi-ti-java/">
        </link>
        <updated>2020-06-12T11:32:26.000Z</updated>
        <content type="html"><![CDATA[<p>Java基础部分</p>
<ol>
<li>Java 的 “一次编写,处处运行”如何实现？<br>
JAVA之所以能实现 一次编译，到处运行，是因为JAVA在每个系统平台上都有 JAVA虚拟机（JVM），JAVA编译的中间文件class是由JAVA虚拟机在运行时动态转换为对应平台的机器代码.</li>
<li>描述JVM运行原理。<br>
Java平台由Java虚拟机和Java应用程序接口搭建，Java语言则是进入这个平台的通道，用Java语言编写并编译的程序可以运行在这个平台上。</li>
</ol>
<p>这个平台的结构如下图所示：   运行期环境代表着Java平台，开发人员编写Java代码(.java文件)，然后将之编译成字节码(.class文件)，再然后字节码被装入内存，一旦字节码进入虚拟机，它就会被解释器解释执行，或者是被即时代码发生器有选择的转换成机器码执行。</p>
<ol start="3">
<li>为什么Java没有全局变量？<br>
Global variables(全局变量) 是指可以全局访问的变量， Java不支持全局变量，原因如下：</li>
<li>全局变量破坏了引用的透明性。</li>
<li>全局变量制造了命名空间冲突。<br>
可以使用properties类将想要全局有效的变量值写在properties文件中,那么在何处用时都从此properties文件中读取这个变量的值就可以了,此值在任何时候都可以修改的</li>
</ol>
<p>说明：我们平时在类中声明的只是相对类而言是全局变量，不是真正意义的全局变量<br>
4.	说明一下public static void main(String args[])这段声明里每个关键字的作用。<br>
Public 是一个访问权限（访问修饰符）公共<br>
static  修饰的成员称为类成员或者静态成员<br>
void   当方法定义时用void修饰时，表示没有返回值<br>
String  类来创建和操作字符串<br>
5.	Java 是否存在内存泄漏？<br>
java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。<br>
6.	<mark>与equals的区别。<br>
&quot;= =&quot;除了比较基本数据之外都是比较的内存地址<br>
&quot;equals&quot;除了没有没有重写equals方法的类之外都是比较的内容<br>
7.	Java中有几种类型的流？<br>
Java中的流分为两种，一种是字节流，另一种是字符流，分别由四个抽象类来表示（每种流包括输入和输出两种所以一共四个）:InputStream，OutputStream，Reader，Writer。<br>
8.	如何用Java代码列出一个目录下所有的文件。<br>
File file=new File(&quot;H:\&quot;);<br>
for(File temp:file.listFiles()){<br>
if(temp.isFile()){<br>
System.out.println(temp.toString());<br>
}<br>
}<br>
9.	&amp;和&amp;&amp;的区别。<br>
1、&amp;与&amp;&amp;都可以用作逻辑与的运算符，当两边的结果都为true时，运算结果才为true，否则只要有一方运算结果是false，运算结果就为false。<br>
2、&amp;&amp;在开发过程中用到的概率比&amp;大，因为&amp;&amp;具有短路的功能，只要第一个表达式是false，就不会再进行判断。例如：if(str!=null &amp;&amp; !str.equals(&quot;&quot;)){}<br>
当str</mark>null时，后面的表达式就不会继续执行，但是<br>
if(str!=null &amp; !str.equals(&quot;&quot;)){}当str==null时，程序会报空指针异常，因为&amp;不具有短路的功能。<br>
3、&amp;同时也是位运算符，就是我们通常所说的按位与运算，当&amp;的左右两边都是Boolean型表达式时或Boolean值时，就执行按位与运算。<br>
10.	 构造器（constructor）是否可被重写（override），其规范是什么？<br>
构造器(构造方法)Constructor不能被继承，因此不能重写Override，但可以被重载Overload（不同参数即可）。<br>
每一个类必须有自己的构造函数，在创建对象时自动调用，如果添加有参构造函数后，默认无参构造函数则被覆盖。子类不会覆盖父类的构造函数，但是在创建子类对象的时候，会自动调用父类构造函数。</p>
<ol start="11">
<li>JAVA 的反射机制的原理。<br>
JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</li>
</ol>
<p>Java反射机制主要提供了以下功能： 在运行时判断任意一个对象所属的类；在运行时构造任意一个类的对象；在运行时判断任意一个类所具有的成员变量和方法；在运行时调用任意一个对象的方法；生成动态代理。<br>
12.	静态嵌套类(Static Nested Class)和内部类(Inner Class)的不同？<br>
内部类是类中类（内部类不为同一包的其他类可见，具有很好的封装性），分为静态内部类，成员内部类，局部内部类以及匿名内部类；局部内部类写在方法里面；用到最多的就是匿名内部类。</p>
<ol>
<li>
<p>静态的内部类称为嵌套类，嵌套类不能直接引用外部类的non-static属性和方法，创建嵌套类对象时不依赖外部类对象；</p>
</li>
<li>
<p>静态内部类没有了指向外部的引用，和C++的嵌套类很相像了，Java内部类和C++嵌套类最大的不同在于是否具有指向外部引用这点；</p>
</li>
<li>
<p>在任何非静态内部类中，都不能有静态数据、静态方法或者又一个静态内部类（也就是不止一层），然后静态内部类可以拥有这一切。</p>
</li>
<li>
<p>如何将String类型转化成Number类型。<br>
Integer类的valueOf方法可以将String转成Number</p>
</li>
<li>
<p>什么是值传递和引用传递？<br>
对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。<br>
对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映到所有的对象上。</p>
</li>
<li>
<p>Java的访问修饰符是什么?<br>
在Java编程语言中有四种权限访问控制符，这四种访问权限的控制符能够控制类中成员的可见性。<br>
public是公共的，被public所修饰的成员可以在任何类中都能被访问到。<br>
protected是受保护的，受到该类所在的包所保护。<br>
friendly是友好的，即在成员的前面不写任何的访问修饰符的时候，默认就是友好的。所谓友好的，是对同一package的类友好。<br>
private是私有的，即只能在当前类中被访问到，它的作用域最小。</p>
</li>
<li>
<p>Java 基础数据类型有哪些？<br>
byte(字节)   short(短整型)  int(整型)  long(长整型)  float(浮点型)  double(双精度)	    char(字符型)  boolean(布尔型)</p>
</li>
<li>
<p>hashCode()和equals()方法的重要性体现在什么地方？<br>
Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。</p>
</li>
<li>
<p>switch 中用于判断的表达式，可以用哪些数据类型?</p>
</li>
<li>
<p>int<br>
2.char<br>
3.byte<br>
4.short<br>
5.枚举</p>
</li>
<li>
<p>String: PS:对JDK版本有要求，必须为1.7及以上版本</p>
</li>
<li>
<p>char型变量中能不能存贮一个中文汉字?为什么?<br>
Java里采用了Unicode编码格式，Unicode编码中一个char型占用2个字节，而一个汉字也是占用2个字节，所以可以存储中文汉字。<br>
备注：C语言里，char占用1个字节，不用存汉字。</p>
</li>
<li>
<p>静态变量和实例变量的区别？<br>
在语法定义上的区别：静态变量前要加static关键字，而实例变量前则不加。<br>
在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。</p>
</li>
<li>
<p>是否可以从一个static方法内部发出对非static方法的调用？<br>
不可以。因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。</p>
</li>
<li>
<p>Integer与int的区别？<br>
1、int是基本数据类型，Integer是包装类；<br>
2、int的默认值是0，Interger的默认值是null；</p>
</li>
<li>
<p>Overload和Override的区别。参数列表相同，返回值不同的方法，是否是重载方法？<br>
Overload是重载的意思，Override是覆盖的意思，也就是重写。<br>
重载是指在一个类里，方法名相同，参数不同；<br>
重写是指子类继承父类，子类里重新编写了父类中的同名（同参数）方法，也就是覆盖了父类的方法；</p>
</li>
</ol>
<p>不是！因为重载必须要求参数列表不同！<br>
24.	接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)?<br>
接口可以继承多个接口。抽象类可以实现(implements)接口，抽象类是可继承具体类。<br>
备注：只要明白了接口和抽象类的本质和作用，这些问题都很好回答。<br>
只有记住抽象类与普通类的唯一区别就是不能创建实例对象和允许有abstract方法。<br>
25.	面向对象有哪三大特性？<br>
1、面向对象有三大特性，分别是：封装、继承和多态。<br>
2、封装：面向对象的封装就是把描述一个对象的属性和行为的代码封装在一个类中，有些属性是不希望公开的，或者说被其他对象访问的，所以我们使用private修饰该属性，使其隐藏起来；类中提供了方法（用public修饰），常用的是get、set方法，可以操作这些被隐藏的属性，其他类可以通过调用这些方法，改变隐藏属性的值！</p>
<p>封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。<br>
3、继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，使用extends关键字实现继承；子类中可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。<br>
4、多态：多态就是在声明时使用父类，在实现或调用时使用具体的子类；即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性，多态增强了软件的灵活性和扩展性。这里可以举个例子，比如声明时使用的是动物类，调用时传递的是一个猫类（动物类的子类）的对象，具体执行父类里动物——吃的方法时，实际执行的是猫——吃的方法。<br>
26.	abstract class和interface有什么区别? 	<br>
1、抽象类里面可以用普通方法，而接口中的方法全部都是抽象的；<br>
2、在应用范围上来说，接口往往在程序设计的时候，用来定义程序模块的功能，方便各模块协同工作；抽象类是对相似类进行抽象，形成一个抽象的父类可供重用！<br>
27.	如何理解Java中的Serialization和Deserialization。<br>
串行化(serialization)是指将一个对象的当前状态转换成字节流(a stream of bytes)的过程，<br>
而反串行化(deserialization)则指串行化过程的逆过程，将字节流转换成一个对象，打回原形。</p>
<ol start="28">
<li>String是最基本的数据类型吗?<br>
1、String是个类，不是基本数据类型；<br>
2、基本数据类型包括byte、int、char、long、float、double、boolean和short。</li>
<li>如何实现字符串的反转及替换。<br>
1.通过jdk自带reverse的方法<br>
public class InvertString {<br>
public static void main(String[] args) {<br>
String a=&quot;abcde&quot;;<br>
StringBuilder b = new StringBuilder(a);<br>
System.out.print(b.reverse().toString());<br>
}<br>
}<br>
注：String类本身没有反转类，需要包装成Stringbuiler或者是StringBuffer类。<br>
2.通过自己写循环。<br>
利用String.toCharArray()方法，将String转成一个char型数组，然后用数组遍历的方式从后向前遍历。</li>
</ol>
<p>public String reverse(String s){<br>
char ch[] = s.toCharArray();<br>
int start = 0, end = ch.length-1;<br>
char temp;<br>
while(start&lt;end){<br>
temp = ch[start];<br>
ch[start] = ch[end];<br>
ch[end] = temp;<br>
start++;<br>
end--;<br>
}<br>
String s1 = String.copyValueOf(ch);<br>
return s1;<br>
}<br>
、<br>
或者是这样<br>
public static String reverse2(String s) {<br>
int length = s.length();<br>
String reverse = &quot;&quot;;<br>
for (int i = 0; i &lt; length; i++)<br>
reverse = s.charAt(i) + reverse;<br>
return reverse;<br>
}</p>
<ol start="30">
<li>
<p>String s = new String(&quot;xyz&quot;);创建了几个字符串对象。<br>
两个对象，要理解这个，就要知道string类的工作原理。<br>
public class StringTest {<br>
public static void main(String[] args){<br>
String s1=&quot;Hello&quot;;</p>
<pre><code>String s2=&quot;Hello&quot;;  

String s3=new String(&quot;Hello&quot;);  

System.out.println(&quot;s1和s2 引用地址是否相同：&quot;+(s1 == s2));  
System.out.println(&quot;s1和s2 值是否相同：&quot;+s1.equals(s2));  

System.out.println(&quot;s1和s3 引用地址是否相同：&quot;+(s1 == s3));  
System.out.println(&quot;s1和s3 值是否相同：&quot;+s1.equals(s3));  
</code></pre>
<p>}<br>
}</p>
</li>
</ol>
<p>输出结果：<br>
s1和s2 引用地址是否相同：true<br>
s1和s2 值是否相同：true<br>
s1和s3 引用地址是否相同：false<br>
s1和s3 值是否相同：true</p>
<ol start="31">
<li>String 和StringBuffer的区别。<br>
1、String是个不可变长度的字符串，而StringBuffer是个可变长度的字符串；<br>
2、在对String类进行操作的时候（例如增加字符），实际上是在内存中产生了一个新的String对象； 而StringBuffer是给原对象增加字符，不是新创建一个对象；</li>
<li>数组有没有length()这个方法? String有没有length()这个方法？<br>
数组没有length()这个方法，有length的属性。String有length()这个方法。</li>
<li>final, finally, finalize的区别。<br>
final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。<br>
finally是异常处理语句结构的一部分，表示总是执行。<br>
finalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM不保证此方法总被调用</li>
<li>Errror , Exception,RuntimeException区别<br>
Error（错误）表示系统级的错误和程序不必处理的异常，是java运行环境中的内部错误或者硬件问题。比如：内存资源不足等。对于这种错误，程序基本无能为力，除了退出运行外别无选择，它是由Java虚拟机抛出的。</li>
</ol>
<p>Exception（违例）表示需要捕捉或者需要程序进行处理的异常，它处理的是因为程序设计的瑕疵而引起的问题或者在外的输入等引起的一般性问题，是程序必须处理的。<br>
Exception又分为运行时异常，受检查异常。<br>
运行时异常，表示无法让程序恢复的异常，导致的原因通常是因为执行了错误的操作，建议终止程序，因此，编译器不检查这些异常。<br>
受检查异常，是表示程序可以处理的异常，也即表示程序可以修复（由程序自己接受异常并且做出处理）， 所以称之为受检查异常。</p>
<p>Exception体系包括RuntimeException体系和其他非RuntimeException的体系：<br>
① RuntimeException：RuntimeException体系包括错误的类型转换、数组越界访问和试图访问空指针等等。处理RuntimeException的原则是：如果出现RuntimeException，那么一定是程序员的错误。例如，可以通过检查数组下标和数组边界来避免数组越界访问异常。<br>
②其他非RuntimeException（IOException等等）：这类异常一般是外部错误，例如试图从文件尾后读取数据等，这并不是程序本身的错误，而是在应用环境中出现的外部错误。</p>
<ol start="35">
<li>
<p>Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用。<br>
throws是获取异常<br>
throw是抛出异常<br>
try是将会发生异常的语句括起来，从而进行异常的处理，<br>
catch是如果有异常就会执行他里面的语句，<br>
而finally不论是否有异常都会进行执行的语句。</p>
</li>
<li>
<p>throw和throws有什么区别？<br>
throws是用来声明一个方法可能抛出的所有异常信息，而throw则是指抛出的一个具体的异常类型。</p>
</li>
<li>
<p>请说一下你常用的几种异常？<br>
空指针异常；  NullPointerException<br>
数组下标越界； ArrayIndexOutOfBoundsException<br>
类型转换异常； ClassCastException<br>
算数异常，例如除数为零；ArithMeticException<br>
IO异常，比如说找不到文件； FileNotFoundException<br>
找不到类异常；  ClassNotFoundException<br>
sql异常，例如sql语句不能正常运行；<br>
…</p>
</li>
<li>
<p>线程的基本概念？线程的基本状态以及状态之间的关系<br>
1、是程序执行流的最小单元。在单个程序中同时运行多个线程完成不同的工作，称为多线程。<br>
2、开始时：就绪状态，等待cpu调用后进入运行状态，运行过程中遇到阻塞事件，进入阻塞状态，等待阻塞事件结束后，重新进入就绪状态；如果没有阻塞事件，运行结束后，则进入结束状态。</p>
</li>
<li>
<p>sleep() 和 wait() 有什么区别?<br>
sleep就是暂停当前线程一段时间，把cpu让给其他线程使用，到时后会自动恢复。调用sleep不会释放对象锁。<br>
wait方法导致本线程放弃对象锁，进入等待，只有等到本对象的notify方法（或notifyAll）后本线程才进入就绪状态，等待执行。</p>
</li>
<li>
<p>多线程有几种实现方法?<br>
多线程有两种实现方法，分别是继承Thread类与实现Runnable接口</p>
</li>
<li>
<p>启动一个线程是用run()还是start()? .<br>
启动一个线程是调用start()方法，使线程就绪状态，以后可以被调度为运行状态，一个线程必须关联一些具体的执行代码，run()方法是该线程所关联的执行代码。</p>
</li>
<li>
<p>线程的基本状态以及状态之间的关系。<br>
1、新建状态（New）：新创建了一个线程对象。<br>
2、就绪状态（Runnable）：也叫可运行状态。线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。<br>
3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。<br>
4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：<br>
①等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。<br>
②同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。<br>
③其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。<br>
5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p>
</li>
<li>
<p>Set和List的区别，List和Map的区别？<br>
1、Set是无序的，元素不可重复；List是有序的，元素可以重复；<br>
2、List存储的是单个对象的集合（有序的），Map存储的是键值对为对象的集合（无序的）；</p>
</li>
<li>
<p>同步方法、同步代码块区别？<br>
1.同步方法<br>
即有synchronized关键字修饰的方法。<br>
由于java的每个对象都有一个内置锁，当用此关键字修饰方法时，<br>
内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。<br>
2.同步代码块<br>
即有synchronized关键字修饰的语句块。<br>
被该关键字修饰的语句块会自动被加上内置锁，从而实现同步</p>
</li>
<li>
<p>描述Java 锁机制。<br>
java中所说的锁就是指的内置锁，每个java对象都可以作为一个实现同步的锁，虽然说在java中一切皆对象， 但是锁必须是引用类型的，基本数据类型则不可以 。每一个引用类型的对象都可以隐式的扮演一个用于同步的锁的角色，执行线程进入synchronized块之前会自动获得锁，无论是通过正常语句退出还是执行过程中抛出了异常，线程都会在放弃对synchronized块的控制时自动释放锁。 获得锁的唯一途径就是进入这个内部锁保护的同步块或方法 。</p>
</li>
<li>
<p>Comparable和Comparator接口是干什么的？列出它们的区别<br>
它们都是用于对类的对象进行比较和排序使用的接口。<br>
Comparable是排序接口，位于java.lang包下，若一个类实现了Comparable接口，且重写了compareTo方法，就意味着该类支持排序，常结合Collections.sort或Arrays.sort对集合或数组内的元素进行排序。</p>
</li>
</ol>
<p>Comparator是比较接口，位于java.util包下，我们如果需要控制某个类对象的次序，而该类本身不支持排序(即没有实现Comparable接口)，那么我们就可以建立一个“该类的比较器”来进行排序，这个“比较器”只需要实现Comparator接口即可。<br>
Comparable相当于“内部比较器”，而Comparator相当于“外部比较器”。</p>
<ol start="47">
<li>
<p>Java集合类框架的最佳实践有哪些？<br>
首先Java中的集合框架体系非常强大和完善，主要用于程序中的数据存储，从最顶层主要分为了Collection和Map接口，我们平时使用的集合类都是从这两个类别中扩展开来，正确选择要使用的集合的类型对性能非常重要。<br>
比如：<br>
1）元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。<br>
2）如果我们大概知道存储的数量，可以在使用集合时先给予一个初始容量大小，从而有效避免集合自动增长的算法而造成的空间浪费，如new ArrayList(30)。<br>
3）为了类型安全，提高存取效率和可读性，我们优先使用泛型，并且还能有效避免ClassCastException类型转换异常。<br>
4）有时为了提高数据的快速定位查找，可优先使用Map键值对集合，因为Map集合在数据的查找上效率非常高，但是如果要保证数据的顺序，最好使用List<br>
5）使用JDK提供的不变类作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。<br>
6）底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。</p>
</li>
<li>
<p>HashMap和Hashtable的区别。<br>
1、HashMap和HashTable都是键值对数据结构，且都实现了Map接口，存储的元素无序；<br>
2、HashMap非线程安全的，而HashTable是线程安全的（HashTable里面的方法使用Synchronize关键字修饰），所以HashMap的效率高于HashTable。<br>
3、HashMap允许空键空值，HashTable则不允许</p>
</li>
<li>
<p>HashSet和TreeSet有什么区别？<br>
相同点：1、单列存储   2、元素不可重复<br>
不同点：1、底层数据结构不同（HashSet=<mark>哈希表结构   TreeSet</mark>=二叉树结构）<br>
2、数据唯一性依据不同（HashSet通过重写hashcode和equals     TreeSet通过compareable接口）<br>
3、有序性不同，HashSet无序，TreeSet有序</p>
</li>
<li>
<p>说出ArrayList,Vector, LinkedList的存储性能和特性。<br>
1、ArrayList和LinkedList、Vector都实现了List接口；<br>
2、ArrayList和Vector底层是用数组实现的，而LinkedList使用双向链表实现的，在集合插入、删除元素时，ArrayList需要移动数组元素性能较差；但是在查询时，因为是连续的数组，所以查询速度快；LinkedList正好相反。<br>
3、在容量增长上，ArrayList增长原来50%，Vector集合增加容量原来的一倍。<br>
4、安全性方面Vector能够保证线程安全，但是效率比ArrayList要低。</p>
</li>
<li>
<p>在Java语言,怎么理解goto。<br>
goto这个词是C语言中的，goto语句通常与条件语句配合使用，可用来实现条件转移，构成循环，跳出循环体等功能。而在结构化程序语言中一般不主张使用goto语句， 以免造成程序流程的混乱，使理解和调试程序都产生困难。但是在java语言中，goto这个词只是作为了保留字，不推荐使用，因为java语言讲究简单，方便。</p>
</li>
<li>
<p>请描述一下Java 5有哪些新特性？<br>
1、泛型<br>
2、For-Each循环<br>
3、自动装包/拆包<br>
4、枚举<br>
5、静态导入<br>
6、Annotation(框架配置,代码生成 的里程<br>
7、可变参数<br>
8、字符串格式化器(java.util.Formatter)<br>
9、新的线程模型和并发库 Thread Frameword</p>
</li>
<li>
<p>Java 6新特性有哪些。<br>
1、引入了一个支持脚本引擎的新框架<br>
2、UI的增强<br>
3、对WebService支持的增强（JAX-WS2.0和JAXB2.0）<br>
4、一系列新的安全相关的增强<br>
5、JDBC4.0<br>
6、Compiler API<br>
7、通用的Annotations支持</p>
</li>
<li>
<p>Java 7 新特性有哪些。<br>
1.switch中可以使用字串了<br>
2.运用List<String> tempList = new ArrayList&lt;&gt;(); 即泛型实例化类型自动推断<br>
3.语法上支持集合，而不一定是数组<br>
4.新增一些读取环境信息的工具方法<br>
5.Boolean类型反转，空指针安全,参与位运算<br>
6.两个char间的equals<br>
7.安全的加减乘除<br>
8.map集合支持并发请求，且可以写成 Map map = {name:&quot;xxx&quot;,age:18};</p>
</li>
<li>
<p>Java 8 新特性有哪些。<br>
1.Lambda 表达式 − Lambda允许把函数作为一个方法的参数，用更简洁的语法实现以前复杂的功能代码<br>
2.方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。<br>
3.接口中可以使用default关键字声明一个默认实现方法。<br>
4.新的编译工具，如：Nashorn引擎 jjs、 类依赖分析器jdeps。<br>
5.新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。<br>
6.加强对日期与时间的处理。<br>
7.Optional 类用来解决空指针异常。<br>
8.Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用。</p>
</li>
<li>
<p>描述Java 动态代理。<br>
代理模式是常用的java设计模式之一，java中的代理实现主要有基于接口的jdk动态代理和基于类的cglib动态代理，代理的特点就是会为目标对象产生代理对象，从而在调用实际目标对象方法时实现无侵入式的代码扩展，比如一些框架中的拦截器机制、springAOP面向切面机制都是基于动态代理模式实现的，其次也可以更安全的保护目标对象。动态代理的目的主要就是为了解决一些安全性问题（不让客户直接调用目标对象的功能，而是相当于通过中介），其次就是可以在调用目标功能方法之前、之后额外添加一些功能，比如日志、事务等，并且还能阻止调用功目标功能，从而实现权限控制等。</p>
</li>
<li>
<p>为什么要使用单例模式？<br>
1、避免在开发程序的时候，创建出一个类的多个实例（占用空间，性能问题），所以使用单例模式，保证该类只创建一个对象；<br>
2、一般单例模式通常有两种形式：它的构造函数为private的，必须有一个静态方法，静态方法返回自己的实例；实行形式有两种，懒汉式和饿汉式；所谓的饿汉式就是在声明实例的时候直接初始化对象，而懒汉式是先声明一个空对象，在静态方法中实例化该对象并返回。<br>
//构造方法私有化，让外界无法创建对象<br>
private Test() {<br>
}<br>
//在当前类中声明静态对象，并提供公共静态方法让外界调用获取对象<br>
private static Test t;</p>
<p>public static Test getInstance(){<br>
if(t==null){<br>
t=new Test();<br>
}<br>
return t;<br>
}</p>
</li>
<li>
<p>Java中有哪些常用排序方式，使用Java实现冒泡排序。<br>
排序主要用于将一组无需数据进行升序/降序排列，Java中有很多种排序方法，如：冒泡排序，选择排序，插入排序，快速排序等，其中在大量数据无需数据中效率最高的属于快速排序，比如实际工作中如果需要对数据排序，我们可以借助JDK中自带的Arrays.sort方法，它内部采用了快速排序，效率非常高，当然也可以自己实现。<br>
冒泡排序代码如下：<br>
import java.util.Arrays;<br>
public class BubbleSort {<br>
public static void BubbleSort(int[] arr) {<br>
int temp;//定义一个临时变量<br>
for(int i=0;i&lt;arr.length-1;i++){		//循环的轮数<br>
for(int j=0;j&lt;arr.length-i-1;j++){	//从前往后循环比较，从第1个数往后依次比较<br>
if(arr[j+1]&lt;arr[j]){			//如果后面的数字小于前面的则交换<br>
temp = arr[j];<br>
arr[j] = arr[j+1];<br>
arr[j+1] = temp;<br>
}<br>
}<br>
}<br>
}<br>
public static void main(String[] args) {<br>
int arr[] = new int[]{1,6,2,2,5};<br>
BubbleSort.BubbleSort(arr);<br>
System.out.println(Arrays.toString(arr));<br>
}<br>
}</p>
</li>
<li>
<p>Java中垃圾回收有什么目的？什么时候进行垃圾回收？<br>
垃圾回收器的作用 ：是查找和回收（清理）无用的对象。以便让JVM更有效的使用内存<br>
Java语言中一个显著的特点就是引入了垃圾回收机制（简称GC），使c语言程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，Java中的对象不再有“作用域”的概念，只有对象的引用才有“作用域”。垃圾回收可以有效的防止内存泄露，有效的使用空闲的内存。简单的理解，就是什么时候：当对象失去引用后，系统会在调度的时间对它所占用的内存进行回收。</p>
</li>
<li>
<p>如何实现对象克隆。<br>
实现对象克隆有两种方式：<br>
1). 实现Cloneable接口并重写Object类中的clone()方法；  <br>
2). 实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆。</p>
</li>
<li>
<p>Java设计模式有哪些？<br>
Java中有23种设计模式，我觉得理解设计模式对我们程序中的类和类的设计、依赖关系，扩展性，灵活性起着非常重要的作用，比如spring框架中都大量使用了设计模式，我比较熟悉的设计模式有：<br>
1.单例设计模式<br>
2.工厂设计模式（简单工厂、抽象工厂、工厂方法）<br>
3.代理设计模式<br>
4.观察者设计模式<br>
5.适配器模式<br>
6.原型模式</p>
</li>
<li>
<p>GC是什么？为什么要有GC？<br>
GC是垃圾回收的意思（gabage collection），内存处理器是编程人员容易出现问题的地方，忘记或者错误的内存回收导致程序或者系统的不稳定甚至崩溃，java的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，java语言没有提供释放已分配内存的显式操作方法。</p>
</li>
<li>
<p>Java中是如何支持正则表达式。<br>
Java中的String类提供了支持正则表达式操作的方法，包括：matches()、replaceAll()、replaceFirst()、split()。此外，Java中可以用Pattern类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作。</p>
</li>
<li>
<p>比较一下Java和JavaSciprt。<br>
JavaScript 与 Java 是两个公司开发的不同的两个产品。Java 是 SUN 公司推出的新一代面向对象的程序设计语言，特别适合于 Internet 应用程序开发；而JavaScript 是 Netscape 公司的产品，其目的是为了扩展 Netscape Navigator功能,而开发的一种可以嵌入 Web 页面中的基于对象和事件驱动的解释性语言,它的前身是 Live Script；而 Java 的前身是 Oak 语言。</p>
</li>
<li>
<p>Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？<br>
11.5+0.5后是12再向下取整是12;-11.5+0.5后是-11再向下取整-11</p>
</li>
<li>
<p>JDBC连接数据库的步骤？<br>
JDBC是java连接及操作数据库的一种技术，使用步骤如下：<br>
1、加载JDBC驱动程序；  Class.forName(“com.mysql.jdbc.Driver”)<br>
2、创建数据库的连接对象；<br>
Connection conn = DriverManager.getConnection(“jdbc:mysql://localhost:3306/数据库名”,”root”,”123456”);<br>
3、创建一个执行sql命令的Statement或PreparedStatement或者CallableStatement对象<br>
4、执行SQL语句；        增删改操作executeUpdate()返回int       查询操作executeQuery()返回结果集ResultSet<br>
5、返回并处理结果；        如果是查询需要对结果集逐行处理：while(rst.next())<br>
6、关闭连接；                conn.close()</p>
</li>
<li>
<p>Class.forName()方法有什么作用？<br>
通过一个字符串加载一个类到java虚拟机中，返回与给定的字符串名称相关联类或接口的Class对象，该方法使用时会抛出ClassNotFoundException，即类无法找到异常。</p>
</li>
<li>
<p>JDBC中如何进行事务处理<br>
事务是为了保证一个业务下的多条更新语句处于同一个不可分割的单元，要么都成功执行要么都取消回滚，目的是保证数据的准确合理性。<br>
JDBC同样对事务进行了很好的支持，因为JDBC默认是开启事务的，所以需要通过数据库连接对象的setAutoCommit(false)来禁止自动提交，然后在执行完相关操作之后，调用连接对象的commit()方法提交事务，如果出现异常则调用rollback()方法进行回滚。<br>
一般在实际应用中，建议使用存储过程来进行事务的控制，因为存储过程更安全，高效。</p>
</li>
<li>
<p>JDBC能否处理Blob和Clob<br>
Blob是指二进制大对象(Binary Large Object)，而Clob是指大字符对象(Character Large Objec)，因此其中Blob是为存储大的二进制数据而设计的，而Clob是为存储大的文本数据而设计的。JDBC的PreparedStatement和ResultSet都提供了相应的方法来支持Blob和Clob操作。</p>
</li>
<li>
<p>JDBC中的PreparedStatement相比Statement的好处<br>
1、PreparedStatement是Statement的子接口；<br>
2、PreparedStatement支持SQL语句中使用占位符，能够避免SQL注入，安全性更好；<br>
3、PreparedStatement对SQL语句有预编译的功能，所以性能更好；</p>
</li>
<li>
<p>解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法。<br>
通常我们定义一个基本数据类型的变量，还有就是函数调用的现场保存都使用内存中的栈空间；而通过new关键字和构造器创建的对象放在堆空间；程序中的字面量（literal）如直接书写的100、”hello”和常量都是放在静态区中。<br>
栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。<br>
String str = new String(&quot;hello&quot;);<br>
上面的语句中变量str放在栈上，用new创建出来的字符串对象放在堆上，而”hello”这个字面量放在静态区。</p>
</li>
<li>
<p>怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？<br>
代码如下所示：</p>
</li>
</ol>
<p>String s1 = &quot;你好&quot;;<br>
String s2 = new String(s1.getBytes(&quot;GB2312&quot;), &quot;ISO-8859-1&quot;);<br>
73.	运行时异常与受检异常有何异同？<br>
异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误，只要程序设计得没有问题通常就不会发生。受检异常跟程序运行的上下文环境有关，即使程序设计无误，仍然可能因使用的问题而引发。Java编译器要求方法必须声明抛出可能发生的受检异常，但是并不要求必须声明抛出未被捕获的运行时异常。异常和继承一样，是面向对象程序设计中经常被滥用的东西，在Effective Java中对异常的使用给出了以下指导原则：</p>
<ul>
<li>不要将异常处理用于正常的控制流（设计良好的API不应该强迫它的调用者为了正常的控制流而使用异常）</li>
<li>对可以恢复的情况使用受检异常，对编程错误使用运行时异常</li>
<li>避免不必要的使用受检异常（可以通过一些状态检测手段来避免异常的发生）</li>
<li>优先使用标准的异常</li>
<li>每个方法抛出的异常都要有文档</li>
<li>保持异常的原子性</li>
<li>不要在catch中忽略掉捕获到的异常</li>
</ul>
<ol start="74">
<li>
<p>列出一些你常见的运行时异常？<br>
ArithmeticException（算术异常）   5/0<br>
ClassCastException （类转换异常）<br>
IllegalArgumentException （非法参数异常）<br>
IndexOutOfBoundsException （下标越界异常）<br>
NullPointerException （空指针异常）<br>
SecurityException （安全异常）<br>
NumberFormatException   （数字格式异常 Integer.parseInt(“a1b2”)）<br>
FileNotFoundException （文件找不到异常）<br>
ClassNotFoundException （类找不到异常）</p>
</li>
<li>
<p>List、Set、Map是否继承自Collection接口？<br>
List、Set 是，Map 不是。Map是键值对映射容器，与List和Set有明显的区别，而Set存储的零散的元素且不允许有重复元素（数学中的集合也是如此），List是线性结构的容器，适用于按数值索引访问元素的情形。</p>
</li>
<li>
<p>Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?<br>
sleep()方法（休眠）是线程类（Thread）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复。<br>
wait()是Object类的方法，调用对象的wait()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（wait pool），只有调用对象的notify()方法（或notifyAll()方法）时才能唤醒等待池中的线程进入等锁池（lock pool），如果线程重新获得对象的锁就可以进入就绪状态。</p>
</li>
<li>
<p>线程的sleep()方法和yield()方法有什么区别?<br>
① sleep()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；yield()方法只会给相同优先级或更高优先级的线程以运行的机会；<br>
② 线程执行sleep()方法后转入阻塞（blocked）状态，而执行yield()方法后转入就绪（ready）状态；<br>
③ sleep()方法声明抛出InterruptedException，而yield()方法没有声明任何异常；<br>
④ sleep()方法比yield()方法（跟操作系统CPU调度相关）具有更好的可移植性。</p>
</li>
<li>
<p>请说出与线程同步以及线程调度相关的方法。</p>
</li>
</ol>
<ul>
<li>wait()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁；</li>
<li>sleep()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理InterruptedException异常；</li>
<li>notify()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关；</li>
<li>notityAll()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；</li>
</ul>
<ol start="79">
<li>
<p>举例说明同步和异步。<br>
同步：指发送一个请求,需要等待返回,然后才能够发送下一个请求，有个等待过程，如果某个操作非常耗时，则会使后续的功能处于等待状态，产生假死/阻塞效果。<br>
异步：指发送一个请求,不需要等待返回,随时可以再发送下一个请求，即不需要等待。<br>
区别：一个需要等待，一个不需要等待，在部分情况下，我们的项目开发中都会优先选择不需要等待的异步交互方式。银行的转账系统，对数据库的保存操作等等，都会使用同步交互操作，其余情况都优先使用异步交互。<br>
Java中的某个方法可以通过Synchronized关键字使其变为同步，从而解决线程中的异步资源安全问题。</p>
</li>
<li>
<p>Java中如何实现序列化，有什么意义？<br>
Java中将一个类实现Serializable接口（实际是空接口，起标识作用），则该类的对象就可以被序列化。<br>
序列化就是将类的对象进行流化，被流化后的对象可以在网络中传输或者以文件的形式进行保存，然后在需要的时候可以进行反序列化，将流化的对象还原为原始对象，并且数据都保持原来的状态。具体操作是使用writeObject()方法进行写，然后使用时再通过readObject()方法进行对象读取还原。</p>
</li>
<li>
<p>获得一个类的类对象有哪些方式？</p>
</li>
</ol>
<ul>
<li>方法1：类型.class，例如：String.class</li>
<li>方法2：对象.getClass()，例如：”hello”.getClass()</li>
<li>方法3：Class.forName()，例如：Class.forName(“java.lang.String”)</li>
</ul>
<ol start="82">
<li>如何通过反射创建对象？</li>
</ol>
<ul>
<li>方法1：通过类对象调用newInstance()方法，例如：String.class.newInstance()</li>
<li>方法2：通过类对象的getConstructor()或getDeclaredConstructor()方法获得构造器（Constructor）对象并调用其newInstance()方法创建对象，例如：<br>
String.class.getConstructor(String.class).newInstance(“Hello”);</li>
</ul>
<ol start="83">
<li>Enumeration接口和Iterator接口的区别有哪些？<br>
Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。</li>
<li>串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？<br>
吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。<br>
而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://hihuashao.github.io/post/hello-gridea/</id>
        <link href="https://hihuashao.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>